name: Continuous Integration

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  PYTHON_VERSION: "3.13.0"

jobs:
  ci:
    name: "CI Pipeline (Python 3.13.0)"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log current date
        run: |
          echo "Current date: $(date +%Y-%m-%d)"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Verify Python version
        run: |
          python --version
          which python
          uv python list

      - name: Create virtual environment
        run: uv venv --python ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip list

      - name: Install system dependencies for Qt
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            x11-utils \
            xvfb

      - name: Build resources
        run: uv run python scripts/build_resources.py

      - name: Verify resource compilation
        run: |
          ls -la src/resources_rc.py
          uv run python -c "import sys; sys.path.insert(0, 'src'); import resources_rc; print('✅ Resources compiled successfully')"

      - name: Run ruff checks
        run: |
          uv run ruff check --output-format=github .
          uv run ruff format --check .

      - name: Run mypy type checking
        run: uv run mypy src/ --ignore-missing-imports

      - name: Run tests with coverage
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: ":99"
        run: |
          # Start virtual display for Qt tests
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3

          # Run tests with coverage
          uv run pytest \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=40 \
            -v

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test application startup (smoke test)
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: ":99"
        run: |
          timeout 10s uv run python -c "
          import sys
          sys.path.insert(0, 'src')
          from app import setup_logging
          setup_logging()
          print('✅ Application imports successful')
          " || echo "✅ Application startup test completed"

      - name: Validate project structure
        run: |
          echo "📁 Validating project structure..."

          # Check required files exist
          required_files=(
            "pyproject.toml"
            ".python-version"
            ".pre-commit-config.yaml"
            "src/app.py"
            "src/resources_rc.py"
            "tests/conftest.py"
          )

          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

          # Check directory structure
          required_dirs=(
            "src/config"
            "src/controllers"
            "src/themes"
            "src/ui"
            "tests"
            "resources"
            "scripts"
          )

          for dir in "${required_dirs[@]}"; do
            if [[ -d "$dir" ]]; then
              echo "✅ $dir/ exists"
            else
              echo "❌ $dir/ missing"
              exit 1
            fi
          done

      - name: Check dependency security
        run: |
          uv pip audit || echo "⚠️ Security audit completed with warnings"

      - name: Generate build summary
        if: always()
        run: |
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "See job logs for detailed test output and coverage reports." >> $GITHUB_STEP_SUMMARY
